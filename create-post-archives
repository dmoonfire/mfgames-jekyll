#!/usr/bin/perl

#
# Setup
#

# Directives
use strict;
use warnings;

# Modules
use File::Find;
use File::Basename;
use Getopt::Long;
use YAML;

use Data::Dumper;

#
# Command-Line Processing
#

# Grab the options from the command line.
my $verbose = 0;
my $year_layout = "year-archive";
my $month_archive = "month-archive";
my $output = undef;

GetOptions(
	"verbose" => \$verbose,
	"output|o=s" => \$output);

die "--output must be defined" unless defined $output;

# Go through all the posts. We'll add in the appropriate metadata tags
# into each one to allow us to build up a TOC entry. Once we are done,
# we'll have a list of all the years and month that need archive
# entries.

# Go through the directories left on the argument list.
my %years = ();

finddepth(\&process, @ARGV);

sub process
{
	# Pull out the elements we care about.
	my $dir = $File::Find::dir;
	my $filename = $_;
	my $filepath = $File::Find::name;
	$filepath = "./" . $filepath unless $filepath =~ /^\./;

	# If it isn't a file, we don't do anything extra.
	return unless $filename =~ m@201[34]@;
	return unless (-f $filename);
	return unless (m/\.html$/ || m/\.markdown$/);

	# Report what we're processing.
	print "Processing $filename\n" if $verbose;

	# Open up the file and pull out the YAML contents.
	$/ = undef;

	open INCLUDE, "<$filename"
		or die "Cannot open $filepath ($!)";
	my $buffer = <INCLUDE>;
	$buffer =~ s/^---(.*?)---(.*)$/$1\n/s;
	close INCLUDE;

	my $content = $2;

	# Grab the first part of the file which is a YAML structure.
	$buffer =~ s@\t@    @sg;
	my ($yaml) = Load($buffer);

	# Parse the format to add in the entries as "yearArchive" and
	# "monthArchive". Naturaly, we use ISO dates because that is the
	# only date format.
	unless ($filename =~ m@^(\d+)-(\d+)-(\d+)-@)
	{
		print STDERR "$filename: Cannot parse filename.\n";
		return;
	}

	my ($year, $month, $day) = ($1, $2, $3);

	$$yaml{"year"} = $year;
	$$yaml{"yearMonth"} = "$year-$month";

	# Keep track of our years.
	my $months = $years{$year};
	$months = {} unless defined $months;
	$years{$year} = $months;
	$$months{$month}++;

	# Write everything back out.
	open OUTPUT, ">$filename" or die "Cannot open $filepath ($!)";
	print OUTPUT Dump($yaml), "---", $content;
	close OUTPUT;
}

#
# Create the entries
#

# Make sure the output exists.
mkdir($output) unless -d $output;

# Go through all the years.
foreach my $year (sort { $a <=> $b } keys %years)
{
	# Create the year directory, if we don't have it.
	my $yeardir = "$output/$year";
	print STDERR "Generating year $year\n" if $verbose;

	#unless (-d $yeardir)
	{
		print STDERR "  Making directory $yeardir\n";
		system("mkdir -p '$yeardir'");
	}

	# Create the year file.
	open YEAR, ">$yeardir/index.markdown"
		or die "Cannot write $yeardir/index.markdown ($!)";
	print YEAR join("\n",
					"---",
					"title: $year Archive",
					"layout: year-archive",
					"archiveYear: $year",
					"---");
	close YEAR;

	# Go through the months.
	my $months = $years{$year};

	foreach my $month (sort { $a <=> $b } keys %$months)
	{
		# Create the month file.
		print STDERR "  Generating month $month\n" if $verbose;

		open MONTH, ">$yeardir/$month.markdown"
			or die "Cannot write $yeardir/$month.markdown ($!)";
		print MONTH join("\n",
						"---",
						"title: $year-$month Archive",
						"layout: month-archive",
						"archiveYear: $year",
						"archiveYearMonth: $year-$month",
						"---");
		close MONTH;
	}
}
