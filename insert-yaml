#!/usr/bin/perl

#
# Setup
#

# Directives
use strict;
use warnings;

# Modules
use File::Find;
use File::Basename;
use Getopt::Long;
use YAML;

use Data::Dumper;

#
# Command-Line Processing
#

# Grab the options from the command line.
my $verbose = 0;

GetOptions(
	"verbose" => \$verbose);

# The first element is the file to load and manipulate.
my $filename = shift @ARGV;
print "Processing $filename" if $verbose;

# Load in the two parts of the file.
open FILE, "<$filename" or die "Cannot open $filename ($!)";
$/ = undef;
my $buffer = <FILE>;

unless ($buffer =~ m/^---(.*?)---(.*)$/s)
{
	print STDERR "$filename: Cannot parse YAML block!\n";
	print STDERR $buffer, "\n";
	exit 1;
}

close FILE;

# Pull out the metadata and content and then parse the metadata as
# YAML.
my $metadata = $1;
my $content = $2;
my ($yaml) = Load($metadata);

# Insert the YAML of the secondary elements into the page YAML.
while (@ARGV)
{
	# Pull out the file and key.
	my $insert_key = shift @ARGV;
	my $insert_file = shift @ARGV;

	# Load the insert file into memory.
	open FILE, "<$insert_file" or die "Cannot open $insert_file ($!)";
	my $insert = <FILE>;
	$insert =~ s/^---(.*?)---(.*)$/$1/s;
	my ($insert_yaml) = Load($insert);
	close FILE;

	# Insert the YAML into the file.
	$$yaml{$insert_key} = $insert_yaml;
}
 
# Write everything back out.
open OUTPUT, ">$filename" or die "Cannot open $filename ($!)";
print OUTPUT Dump($yaml), "---\n", $content;
close OUTPUT;
