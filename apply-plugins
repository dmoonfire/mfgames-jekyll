#!/usr/bin/perl

# Goes through the given Markdown files and substitutes {{Name}} with
# the output of an inline plugin.

#
# Setup
#

# Directives
use strict;
use warnings;

# Modules
use File::Find;
use File::Basename;
use Getopt::Long;
use YAML;

use Data::Dumper;

#
# Command-Line Processing
#

# Grab the options from the command line.
my $verbose = 0;
my $root_directory = "";
my @plugin_scripts = ();

GetOptions(
	"root=s" => \$root_directory,
	"verbose" => \$verbose,
	"plugin=s" => \@plugin_scripts);

# Load in the plugins.
foreach my $script (@plugin_scripts)
{
	print "Loading: $script\n" if $verbose;
	require($script);
}

# Go through the directories left on the argument list.
my @indexes = ();
my @pages = ();
my %categories = ();
my @needs_processing = ();

finddepth(\&process, @ARGV);

sub process
{
	# Pull out the elements we care about.
	my $dir = $File::Find::dir;
	my $filename = $_;
	my $filepath = $File::Find::name;
	$filepath = "./" . $filepath unless $filepath =~ /^\./;

	# If it isn't a file, we don't do anything extra.
	return unless (-f $_);
	return unless ($_ =~ /\.markdown$/);

	# Report what we're processing.
	print "Scanning $filepath" if $verbose;

	# Open up the file and pull out the YAML contents.
	$/ = undef;

	open INCLUDE, "<$filename"
		or die "Cannot open $filepath ($!)";
	my $buffer = <INCLUDE>;
	$buffer =~ s/^---(.*?)---(.*)$/$1\n/s;
	my $content = $2;
	close INCLUDE;

	# If we see a plugin, add it to the list of files to process.
	if ($content =~ m@{{[^\}]+}}@)
	{
		print " [Plugin]" if $verbose;
		push @needs_processing, $filepath;
	}

	# Grab the first part of the file which is a YAML structure.
	my ($yaml, $ignore) = Load($buffer);

	# Add in some additional elements.
	$$yaml{"filename"} = $filepath;
	$$yaml{"basename"} = $filepath;
	$$yaml{"basename"} =~ s@^.*$root_directory/@@;
	$$yaml{"basename"} =~ s@^/index.markdown$@@;

	# Normalize the title for inclusion.
	$$yaml{"title"} =~ s@^(A|An|The) (.*)$@$2, $1@;

	# Check for categories.
	if (exists $$yaml{"categories"})
	{
		foreach my $category (@{$$yaml{"categories"}})
		{
			$category = lc($category);
			unless (exists $categories{$category})
			{
				my @ref = ();
				$categories{$category} = \@ref;
			}

			my $ref = $categories{$category};
			push @$ref, $yaml;
		}
	}

	# Add the page to the list.
	print " [Page]\n" if $verbose;
	push @pages, $yaml;
}

#
# Process the files that need work.
#

foreach my $filename (@needs_processing)
{
	# Process the file.
	print "Processing $filename\n";

	# Load in the YAML and content.
	open INCLUDE, "<$filename"
		or die "Cannot open $filename ($!)";
	my $buffer = <INCLUDE>;
	$buffer =~ s/^---(.*?)---(.*)$/$1\n/s;
	my $content = $2;
	close INCLUDE;

	# Grab the first part of the file which is a YAML structure.
	my ($yaml, $ignore) = Load($buffer);

	# Loop through and replace each category.
	my $placeholder = "PLACEHOLDER-1234";
	while ($content =~ s@\{\{([^\}]+)\}\}@$placeholder@s)
	{
		# Figure out the plugin and resolve it.
		my $plugin_name = $1;
		my $plugin_contents = render($plugin_name, $yaml);

		# Put the plugin back.
		$content =~ s@$placeholder@$plugin_contents@s;
	}

	# Put everything back.
	open OUTPUT, ">$filename"
		or die "Cannot write $filename ($!)";
	print OUTPUT Dump($yaml), "---", $content;
	close OUTPUT;
}

#
# Render
#

# This method handles the rendering of the plugin and getting the
# resulting Markdown value from the contents.
sub render
{
	# Get the parameters.
	my ($plugin_name, $yaml) = @_;

	# Get the plugin.
	my $plugins = $$yaml{"plugins"};
	my $plugin = $$plugins{$plugin_name};

	# If we don't have a plugin, then it is a function.
	if (!defined $plugin)
	{
		return render_function($plugin_name, $yaml);
	}

	# Figure out the type of plugin (hint, it's insert category).
	my $plugin_type = lc($$plugin{"type"});

	if ($plugin_type eq "insert category")
	{
		return render_insert_category($plugin_name, $plugin);
	}
	else
	{
		return "**UNKNOWN PLUGIN: $plugin_name\n";
	}
}

sub render_function
{
	# Pull out the variables from the function.
	my ($name, $yaml) = @_;

	# Check for colon-arguments.
	if ($name =~ m@^(\w+):\s*(.*)$@)
	{
		my $function = $1;
		my $args = $2;

		my $s = eval("render_function_$function(\$args);");
		return $s;
	}

	return "*** Unknown Function: name\n";
}

sub render_insert_category
{
	# Get the parameters out.
	my $name = shift @_;
	my $yaml = shift @_;
	my $category = lc($$yaml{"category"});

	print "  $name: Insert category: $category\n";

	# See if we have the category.
	unless (exists $categories{$category})
	{
		return "ERROR: Cannot find items in category: $category\n";
	}

	# Go through all the pages in this category.
	my $buffer = "";

	foreach my $page (sort bytitle @{$categories{$category}})
	{
		my $title = $$page{title};
		my $link = "/" . $$page{basename};
		$link =~ s@index.markdown@@;
		$buffer .= "* [$title]($link)\n";
	}

	# Return the resulting buffer.
	return "$buffer\n";
}

sub bytitle
{
	return $$a{title} cmp $$b{title};
}
